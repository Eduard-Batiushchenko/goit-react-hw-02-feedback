{"version":3,"sources":["Components/Container/Container.module.css","Components/Container/Container.js","Components/Buttons/Buttons.js","Components/Statistics/Statistics.js","App.js","index.js"],"names":["module","exports","Container","children","className","style","container","Buttons","setStats","name","indx","onClick","type","Statistics","good","neutral","bad","total","countPositiveFeedbackPercentage","defaultProps","App","state","buttonsName","Object","keys","a","buttonName","find","el","i","setState","countTotalFeedback","values","this","reduce","acc","value","toFixed","map","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,UAAY,+B,6OCMfC,EAJG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OAAO,qBAAKC,UAAWC,IAAMC,UAAtB,SAAkCH,KCO5BI,G,MARC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACjC,OACE,wBAAQC,QAAS,kBAAMH,EAASE,IAAOE,KAAK,SAA5C,SACGH,MCHDI,G,MAAa,SAAC,GAMb,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAC,EACI,EADJA,gCAEA,OACE,gCACE,4CACA,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,oDAEGC,EAFH,eASRL,EAAWM,aAAe,CACxBF,MAAO,EACPC,gCAAiC,GAGpBL,QCiCAO,E,4MA3DbC,MAAQ,CACNP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPM,YAAcC,OAAOC,KAAK,EAAKH,O,EAE/Bb,S,uCAAW,WAAME,GAAN,eAAAe,EAAA,6DACHC,EAAa,EAAKJ,YAAYK,MAAK,SAACC,EAAIC,GAAL,OAAWA,IAAMnB,KADjD,SAEH,EAAKoB,SAAL,eAAiBJ,EAAa,EAAKL,MAAMK,GAAc,IAFpD,2C,kGAKX,WAAU,IAAD,OACHR,EAAkC,EAEhCa,EAAqBR,OAAOS,OAAOC,KAAKZ,OAAOa,QACnD,SAACC,EAAKC,GACJ,OAAOD,EAAMC,IAEf,GAUF,OAPIL,EAAqB,IACvBb,GACGe,KAAKZ,MAAMP,KAAOiB,EACnB,KACAM,QAAQ,IAIV,eAAC,EAAD,WACE,yDACA,8BACGJ,KAAKX,YAAYgB,KAAI,SAAC7B,EAAMC,GAC3B,OACE,cAAC,EAAD,CAEED,KAAMA,EACNC,KAAMA,EACNF,SAAU,EAAKA,UAHVC,QAQZsB,EAAqB,EACpB,cAAC,EAAD,2BACME,KAAKZ,OADX,IAEEJ,MAAOc,EACPb,gCAAiCA,KAGnC,yD,GArDQqB,aCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.14f1565f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__37m85\"};","import React from 'react';\r\nimport style from './Container.module.css';\r\n\r\nconst Container = ({ children }) => {\r\n  return <div className={style.container}>{children}</div>;\r\n};\r\n\r\nexport default Container;\r\n","import React from 'react';\r\nimport style from './Buttons.module.css';\r\n\r\nconst Buttons = ({ setStats, name, indx }) => {\r\n  return (\r\n    <button onClick={() => setStats(indx)} type=\"button\">\r\n      {name}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport style from './Statistics.module.css';\r\n\r\nconst Statistics = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  countPositiveFeedbackPercentage,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <h2>Statistics</h2>\r\n      <ul>\r\n        <li>Good: {good}</li>\r\n        <li>Neutral: {neutral}</li>\r\n        <li>Bad: {bad}</li>\r\n        <li>Total: {total}</li>\r\n        <li>\r\n          Positive feedback:\r\n          {countPositiveFeedbackPercentage}%\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.defaultProps = {\r\n  total: 0,\r\n  countPositiveFeedbackPercentage: 0,\r\n};\r\n\r\nexport default Statistics;\r\n","import React, { Component } from 'react';\nimport Container from './Components/Container/Container';\nimport Buttons from './Components/Buttons/Buttons';\nimport Statistics from './Components/Statistics/Statistics';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  buttonsName = Object.keys(this.state);\n\n  setStats = async indx => {\n    const buttonName = this.buttonsName.find((el, i) => i === indx);\n    await this.setState({ [buttonName]: this.state[buttonName] + 1 });\n  };\n\n  render() {\n    let countPositiveFeedbackPercentage = 0;\n\n    const countTotalFeedback = Object.values(this.state).reduce(\n      (acc, value) => {\n        return acc + value;\n      },\n      0,\n    );\n\n    if (countTotalFeedback > 0) {\n      countPositiveFeedbackPercentage = (\n        (this.state.good / countTotalFeedback) *\n        100\n      ).toFixed(0);\n    }\n\n    return (\n      <Container>\n        <h1>Please leave a feedback</h1>\n        <div>\n          {this.buttonsName.map((name, indx) => {\n            return (\n              <Buttons\n                key={name}\n                name={name}\n                indx={indx}\n                setStats={this.setStats}\n              />\n            );\n          })}\n        </div>\n        {countTotalFeedback > 0 ? (\n          <Statistics\n            {...this.state}\n            total={countTotalFeedback}\n            countPositiveFeedbackPercentage={countPositiveFeedbackPercentage}\n          />\n        ) : (\n          <p>No feedback given</p>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}